pool:
  vmImage: 'ubuntu-latest'

pr: none

trigger:
  branches:
    include:
      - '*'
  tags:
    include: ['*.*.*', 'v*.*.*'] # Consider using v*.*.* tag names

variables:
  - group: spi-samples-js-variables

  - name: ARTIFACT_NAME
    value: spi-samples-js
  - name: BRANCH_NAME
    value: $[variables['Build.SourceBranch']]
    # Is a tag or a branch
  - name: DEPLOY_DEV
    value: $[ or(startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/spic-158-add-env-meta'), startsWith(variables['Build.SourceBranch'], 'refs/tags/')) ]
    # Is a tag only
  - name: DEPLOY_LIVE
    value: $[ startsWith(variables['build.sourceBranch'], 'refs/tags/') ]

stages:
  - stage: build
    displayName: Build
    jobs:
      - job: build
        cancelTimeoutInMinutes: 5
        displayName: Build
        steps:
          - script: |
              echo "DEPLOY_DEV: $(DEPLOY_DEV)"
              echo "DEPLOY_LIVE: $(DEPLOY_LIVE)"
            displayName: 'Print Environment Variables'
          - task: Npm@1
            displayName: Install dependencies
            inputs:
              command: 'install'

          - task: Npm@1
            displayName: Build project
            inputs:
              command: 'custom'
              customCommand: 'run build'

          - task: Npm@1
            displayName: Run unit tests
            inputs:
              command: 'custom'
              customCommand: 'run test:deploy'

          - task: PublishTestResults@2
            displayName: Publish unit test results
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish code coverage results'
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
              reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'

          - script: |
              echo " * Storing Git Ref in version.txt: $BUILD_SOURCEBRANCH"
              echo "$BUILD_SOURCEBRANCH" > build/version.txt
            displayName: 'Store git ref value in release package'

          - publish: $(System.DefaultWorkingDirectory)/build
            artifact: $(ARTIFACT_NAME)
            displayName: Publish Artifact

          - script: ./scripts/failure-alert.py
            env:
              PYTHONUNBUFFERED: '1'
              ALERT_MESSAGE: 'Build pipeline failure'
            displayName: 'Pipeline failure build stage alert'
            condition: failed()

  - stage: deploy_dev
    condition: eq(variables['DEPLOY_DEV'], true)
    displayName: 'Stage: Deploy (DEV)'
    dependsOn: build
    jobs:
      - deployment: Deploy_Dev
        environment: cdn-dev
        pool: shared
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - download: current
                  artifact: $(ARTIFACT_NAME)
                  displayName: 'Fetch current package from Azure (dev)'

                # We specify a literal value of ${NPM_TOKEN}.
                # The npm cli will replace this value with the contents of the NPM_TOKEN environment variable.
                # We do not write this token value to this file.
                - script: |
                    echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ${ARTIFACT_PATH}/.npmrc
                  displayName: 'Authenticate with npm'
                  env:
                    ARTIFACT_PATH: $(Pipeline.Workspace)

                - script: |
                    echo "Checking directories"
                    echo "Pipeline.Workspace"
                    ls -la $(Pipeline.Workspace)
                    echo "Pipeline.Workspace)/ARTIFACT_NAME"
                    ls -la $(Pipeline.Workspace)/$(ARTIFACT_NAME)
                  displayName: 'Check directories'

                - script: |
                    docker run --rm -v ${ARTIFACT_PATH}:/workspace -w /workspace --env NPM_TOKEN=${NPM_TOKEN} node:20 npx --yes @mx51/cli@^1.5.2 inject-inline-variables --file=spi-samples-js/index.html --var 'ENV=DEV' --searchString='<script type="application/json" data-inline-id="env-var"></script>' --keys=ENV
                  displayName: 'Inject ENV Vars'
                  env:
                    ARTIFACT_PATH: $(Pipeline.Workspace)
                    NPM_TOKEN: $(NPM_TOKEN)

                - script: make deploy
                  env:
                    ASSUMED_ROLE: $(AWS_ASSUMED_ROLE_NONPROD)
                    ARTIFACT_PATH: $(Pipeline.Workspace)/$(ARTIFACT_NAME)
                    CLOUDFRONT_ID: $(CLOUDFRONT_ID_DEV)
                    S3_BUCKET: $(S3_BUCKET_DEV)
                  displayName: 'Deploy package (dev)'

                - script: ./scripts/failure-alert.py
                  env:
                    PYTHONUNBUFFERED: '1'
                    ALERT_MESSAGE: 'Deploy pipeline failure (dev)'
                  displayName: 'Pipeline failure deploy stage alert (dev)'
                  condition: failed()

  - stage: deploy_live
    condition: eq(variables['DEPLOY_LIVE'], true)
    displayName: 'Stage: Deploy (Production)'
    dependsOn: [build, deploy_dev]
    jobs:
      - deployment: Deploy_Prod
        environment: cdn-live
        pool: shared
        workspace:
          clean: all
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - download: current
                  artifact: $(ARTIFACT_NAME)
                  displayName: 'Fetch current package from Azure (live)'

                # We specify a literal value of ${NPM_TOKEN}.
                # The npm cli will replace this value with the contents of the NPM_TOKEN environment variable.
                # We do not write this token value to this file.
                - script: |
                    echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > ${ARTIFACT_PATH}/.npmrc
                  displayName: 'Authenticate with npm'
                  env:
                    ARTIFACT_PATH: $(Pipeline.Workspace)/$(ARTIFACT_NAME)

                - script: |
                    docker run --rm -v ${ARTIFACT_PATH}:/build -w /build --env NPM_TOKEN=${NPM_TOKEN} node:20 npx --yes @mx51/cli@^1.5.2 inject-inline-variables --file=index.html --var 'ENV=LIVE' --searchString='<script type="application/json" data-inline-id="env-var"></script>' --keys=ENV
                  displayName: 'Inject ENV Vars'
                  env:
                    ARTIFACT_PATH: $(Pipeline.Workspace)/$(ARTIFACT_NAME)
                    NPM_TOKEN: $(NPM_TOKEN)

                - script: make deploy
                  env:
                    ASSUMED_ROLE: $(AWS_ASSUMED_ROLE_PROD)
                    ARTIFACT_PATH: $(Pipeline.Workspace)/$(ARTIFACT_NAME)
                    CLOUDFRONT_ID: $(CLOUDFRONT_ID_LIVE)
                    S3_BUCKET: $(S3_BUCKET_LIVE)
                  displayName: 'Deploy package (live)'

                - script: ./scripts/failure-alert.py
                  env:
                    PYTHONUNBUFFERED: '1'
                    ALERT_MESSAGE: 'Deploy pipeline failure (live)'
                  displayName: 'Pipeline failure deploy stage alert (live)'
                  condition: failed()
